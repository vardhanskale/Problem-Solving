BST 
======
In Binary tree, every node has at most two child nodes. 
Since binary tree follows a random insertion process, removal takes O(n) time. 
BST imposes additional restriction that the right child of the node is greater than the node and left child is smaller than the node. 
While searching any element in BST we prune half of the tree each time which makes it faster.
This allows faster search, insert, delete operations faster. One common application of BST is symbol tables.
Only pain point in BST is that in worst case scenario it can grow as a one sided BST. So to overcome this issue...
BBST imposes another restriction that the difference in hight between left and right subtree should not be more than 1. 
The whole idea of balancing is to make the performane of the tree as close as possible to log(N) 
The terminology to balance a BT is called height balancing. 
Height Balanced HB(0) implies that differnce of height between left and right subtree is 0. 
BBST = BST + At every node take |height(LST) - height(RST)| <=1
Its a very restrctive cndition to maintain perfect balancing. For a tree of 4 leaf nodes we will need to add 8 child nodes. 
A little more relaxed condition is HB(1) tree. HB(1) implies that height between left and right subtree is 1.
Thinking pattern to solve the BST problems is recursion and Divide and Prune.

Problem  1 : Find an effecient algorithm to construct a balanced BST using keys from 1 to N. 
Solution using recursive thinking : 

When a batch of keys is given is there any fast way to create a BST. 
I/P : N = 7 
OP : To be a balanced BST Height should be same.
Our data set is :  1 2 3 4 5 6 7
Which key should we take so that we can divide the tree in approximately two equal parts ? 
Lets start with a mid element of this list , which is 4. 
        4
	  /   \ 
  1,2,3	  5,6,7 
That means I'm thinking some kind of recursive stratergy. 
My goal is to get all the seven keys as part of the balanced BST. 
Since I dont know how to create a balanced BST, I'm reducing the problem to smaller problem by fixing middle element as root.
By doing so I can gurantee that a tree is constructed. Lets solve this problem recursively for 1,2,3 
        4
	   / \
      2   6 
     / \  /\ 
	1  3  5 7 

Lets try with even number of inputs 
Our data set is :  1 2 3 4 5 6 7
          3                        3
		 / \         >>>         /   \
      1,2  4,5,6                1     5 
	                             \    /\ 
                                  2  4  6
You can prove by induction that this kind of recursive stratergy is boung to give a balanced BST. 
So when a batch is given, creating a BBST is a super simple process. But in the recursive thinking we 
are dividing using the mid element and left and right we are recursively constructing.

TC : In any recurive program time complexity is determined by identifying the time spent on all the nodes. 
Total nodes = n. Time spent in each node =  The division work at each node is a constant work.  
Total TC is O(n) 

SC : Space complexity of any recursion is the depth of recursion.  
 


   /* 
   We are going to return a BSTNode. Its a node like BT problem. 
   Since we are dividing the problem recursively, we need boundaries for left & right. 
   Lets create an auxullary function to create boundaries. 
   */

public BSTNode buildBST( int n ) {
    return auxBuildBST(1,n);  
} 		

private  BSTNode auxBuildBST(int l , int r )  {
     
	 /*
	  * Base case, terminating condition is when l crosses r.
      * Thats when no keys are there. So we need to return.
      */	   
     if ( l > r ) return null;  
	 
	 // When l = r we can stop because there is a single node.
     if ( l == r ) return  new BSTNode(1);  
	 
	 // To divide the BST, we need to create a mid 
     m = (l + r) / 2 ; 
	 
	 // Whatever mid element we selected, we need a node for it first.
	 BSTNode root = new BSTNode(m); 
	 
	 /* 
	  * Now we need to build the left subtree with keys l, to m-1. 
	  * We also attach the result to the roots left subtree.
	  */ 
	 root.left = auxBuildBST(l, m-1); 
	 
	 // Similarly build a right subtree and attach it to right node. 
	 root.right = auxBuildBST(m+l, r) ;

  return root ; 	  
} 		


Problem 2 : Find an effecient algorithm to search for an element X in a given BBST. 
            When we say balanced BST, we always mean height balanced 1 tree. 
===================================================================================
			
Input :           50      X = 45. Expected output is true.
                 / \
               40   60
			  /  \    \
		 	10	 45	  90 
			
We need to find if the given element is equal to the root node or not. 
If it is less than 50, search in the left subtree. If it is greater than 50, search in the right subtree. 
So a BBST is a sorted array kind of problem. In an array the sortedness is given in linear form but in BST 
the sortedness is given in a non linear form. We know that divide and prune is a natural choice 
for a sorted array problem, similarly for a BST or BBST divide and conquer becomes a natural choice. 
All you need to decide is whether you need to choose the left part or the right part. 
  
Solution : Divide and Prune Pattern. 
Dividing : LST, RST 
Pruning : At any node 
          if ( x < data ) then prune right subtree. 
		  if ( x > data ) then prune left subtree. 
		  if ( x == data ) then return true. 
		  
Problem 3 : Find an effecient algorithm that returns ceil of an element in BBST 
===============================================================================
Ceil means immediate higher element. If X is available return X. 
So in the given tree Ceil(8) = 8.  
Ceil(12) = 15. As 15 is the next highest interger after 12.
          20 
	   10    40 
     8  15	   60  
          17  50

Given x = 12, lets explore how we are going to find 15. 
Lets start from root node. 
Since 20 > 15, either 20 can be the ceil or an item to the left of 20 could be the ceil. 
So I need to remember 20 in a variable, but the right subtree is completely meaningless to try. 
Now we come to node 10. 12 is greater than 10. So 10 and all subtree to the left are useless. 
Then we come to node 15. Sine 15 is greater than 12, either 15 could be ceil or something to its left could be the ceil. 
Since left side is empty, its over. The final answer is 15. 


Lets take another example in the same tree. Let x = 33
Lets start from the root. Since 33 > 20 , move to the right side.  
Since 40 is greater than x=33, either 40 can be a ceil or something  to the left of 40 could be ceil. 
So lets store 40 in a variable and move to its left. 
Since there is nothing to the left of 40, return 40. Our answer is 40. 
 
So we are again using divide and prune logic. 
Divide   : LST, RST 
Pruning  :    if ( x < root.data ) 
                  result = root.data; 
				  prune right subtree. 
			  if ( x > root.data )  
  			      prune left subtree. 
				  
 TC : O( log n ) 
 SC : We just need to move the pointer. We dont need recursion also. So we need a constant space O(1)
 

Lets see how you can translate it into code 
--------------------------------------------

Problem 4 : Find an effecient algorithm that returns the Kth smallest element in a BBST
========================================================================================

Draw a tree. 
             50 
	   40         60 
	30    45 	55  80 
            48
			
Input K = 3  O/P : 45 
Input K = 6  O/P : 55 

If you do inorder traversal you will get the following : 
30,40,48,50,55,60,80. 

Recall that to know the result of inorder traversal, draw a straight line from each node 
till bottom and read results from left to the right. 
 

Solution 1 : Adhoc stratergy : Do inorder traversal. 
-----------------------------------------------------
TC : 
Since you are using recursion, how much time are you spending on each node ? 
The sum of that time is time complexity. At each node we increment a counter and when the 
counter matches K, we stop. So there is a constant effort.

SC : 
Doing inorder traversal means doing recursive thinking.
Since we are doing recursion, the depth of the trecursion stack is equal to the depth of the tree.
Since we are giving a balanced BST, O(logn ) is guranteed.  

Our goal is to make an inorder call and increment a count when you access the node. 
But how do you increment a count in the recursive function ? 
We know that in recursive calls the same function is repeatedly called.
So we need a shared counter across all the calls. 
We know that we never use static and global variables in recurive calls. 
They will fail when you invoke the methods within multiple threads. 
Here we need to maintain a local counter in the heap section and share that 
variable across all the recursive calls. How do you create a counter in heap ? 
Every object in java is created in heap. Since Integer in Java is immutable , 
lets create a wrapper class for our integer counter. 

MyInteger count = new MyInteger(0); 

 
Solution 2 : Divide and Conquer 
-----------------------------------
Draw a tree. 
             50 
	   40         60 
	30    45 	55  80 
            48
Input K = 3  O/P : 45 

Start from root node. Our aim is to find the third smallest. 
At the root node if you can find some way which can tell us that the right side definately does not have the third smallest element. 
At this moment at the root node only data is available. There is no extra information available to make a judgement that right side is useless.
To do pruning at root node some information has to be attached at the root level. 
What is that information that we should attach to get pruning at each level. 
But looking at the tree we derive that the third smallest is at the left side because there are 4 elements at the left in sorted order.
If we store this information ( size of left subtree ) with each node, we can take a decision. 
Or we can maintain the rank of each node. Storing rank means position in order.
For example 50 has a rank 5. So we know that we have to go to its left. 
This information has to be added at node creation time.  
So now at each node we can 1) Size of LST 2) Maintain node rank. 
But how do you know which information makes more sense ? 
But the problem with the ranking approach is that once you add or insert a new node you have to change the rank of all the other node which 
will increase time comlexity from TC : O(log(n)) to O(n). This is not acceptable as we want both methods to be log(n) complexity. 

Draw a tree with size of left sub tree in brackets. 
          ( 4) 50 
	 (1) 40       (1) 60 
  (1)30    45 	 (0)55  80 
           (0)48
		      
Now in this approach whenever you insert a new node in the tree, say at the bottom left, 
as you traverse from root to leftmost leaf node you keep incrementing the count of LST at each node.  
No other nodes gets affected except the nodes which are in the path of insertion. 
This way in the same log(n) complexity element can be added up. 
But how does the LST approach help us in getting Kth smallest element? 

The (4) besides 50 in the tree above says that there are 4 elements to the left of 50.	
Which also means that 50 is the 5th smallest element in the tree and 40 is the second.
Now that you know that 40 is the second smallest element, the 3rd smallest element will be to its right.   

Since you have to go to the right side, the left sides count has to be included as part of the order.
How much remaining more should you add to get overall third smallest.
When I go to the left no one is included. When I go to the right.

Let's assume you are at node 40, which has LSTvalue = 1. Its current position in tree is (LSTvalue+1). 
To get the 3rd smallest node, we do the following : 
3 - [ Position of 40 which is (LSTvalue+1) ]
3 - [ 1+1 ] = 1. 

This value 1 implies that we need the first element to the right of 40, which is also the 3rd smallest in the tree. 
When this value 1 matches the postion of 45. [ LSTValue of 0 + 1 ] we know that we have found the 3rd smallest element.  

Now let's search for 6th smallest element.
1. Read the LSTValue of root. Its 4. So its position is [ LSTValue + 1 = 5 ] 
2. Since we are looking for 6th smallest element which is > 5, we should look at RHS of 5. 
   But how many more elements should we look for ? [6th position - 5 ( position of current element) ] = 1.
   Now we need to find out which one element to choose from the subtree to the right of root node 50. 
   We follow the same approach. 
   a. Go to node 60. Its LSTValue = 1. So its position is 2, which does not match with our requirement of 1. 
   b. Should we go to the left of 60 or to its right ? 
   b. Go to node 55. Its LSTValue = 0. So its position is 1, which matches with 1. So 55 is the 6th smallest element.  
3. That means that even by maintaining the size of lst, it is possible to maintain pruning. 
4. So if my current rank K < LSTValue + 1 you prune the right part.
5. If  K > LSTValue + 1 prune the left part. 

TC : O( Log N ) : Since pruining is happening at each level. 
SC : O(1)


Key takeway : When the node does not provide whether we need to prune the left part of the right, you can aument a value in the node 
              whih can help us with a pruning strategy. What information will your augment will depend on the merit of the problem. 
			  In the existing node we cannot accomodate this information so we need to change the node structure.
			  The rank based solution was good if the add operation would not have increased the TC to O(n) 
			  But because you are adding an extra variable at each node the SC become O(n) 
			  So thats how in practice we compromise on space to get better timing.
			  We need a solution which has time complexity of O(log n) 
			  